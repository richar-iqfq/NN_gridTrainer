{
    "data_structure": {
        "column_names": [
            "ID",
            "FORMULA",
            "NAME",
            "MW(g/mol)",
            "TB(K)",
            "Tc(K)",
            "Pc(bar)",
            "Vc(cm3/mol)",
            "RHOC(g/cm3)",
            "Zc",
            "OMEGA",
            "Dipole Moment",
            "molecular volume",
            "atom",
            "Optimum_Chemical_Potential_Max",
            "atom1",
            "Optimum_Chemical_Potential_Min",
            "atom2",
            "Theta_Inverse_Max",
            "atom3",
            "Theta_Inverse_Min",
            "atom4",
            "Intensive_Atomic_softness_Max",
            "atom5",
            "Intensive_Atomic_Hypersoftness_Max",
            "atom6",
            "Intensive_Heat_Capacity_Max",
            "atom7",
            "Intensive_Entropy_Max",
            "atom8",
            "ODD_at_HOMO_Max",
            "atom9",
            "OAD_at_HOMO_Max",
            "atom10",
            "ODD_at_LUMO_Max",
            "atom11",
            "OAD_at_LUMO_Max",
            "atom12",
            "electrophilicity_intensive_MAX",
            "atom13",
            "thermophilicity_intensive_MAX"
        ],
        "features": [
            "Dipole Moment",
            "molecular volume",
            "Optimum_Chemical_Potential_Max",
            "Optimum_Chemical_Potential_Min",
            "Intensive_Atomic_softness_Max",
            "Intensive_Atomic_Hypersoftness_Max",
            "Intensive_Heat_Capacity_Max",
            "ODD_at_HOMO_Max",
            "electrophilicity_intensive_MAX",
            "thermophilicity_intensive_MAX"
        ],
        "targets" : [
            "Tc(K)",
            "Pc(bar)",
            "Vc(cm3/mol)",
            "RHOC(g/cm3)",
            "Zc",
            "OMEGA"
        ]
    },
    "network_structure": {
        "optimizers": [
            "Adam",
            "Adagrad",
            "Adadelta",
            "AdamW",
            "Adamax"
        ],
        "loss_functions": [
            "nn.L1Loss()",
            "nn.MSELoss()",
            "nn.HuberLoss()",
            "nn.SmoothL1Loss()"
        ],
        "af_valid": [
            "nn.ELU()",
            "nn.LeakyReLU()",
            "nn.ReLU()",
            "nn.SELU()",
            "nn.Sigmoid()",
            "nn.Tanh()",
            "None"
        ]
    }
}
